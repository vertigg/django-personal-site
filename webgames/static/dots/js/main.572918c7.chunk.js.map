{"version":3,"sources":["actions/helpers/contstants.js","actions/helpers/utils.js","actions/helpers/dots.js","actions/helpers/requests.js","actions/history.js","actions/game.js","reducers/game.js","reducers/history.js","actions/auth.js","reducers/auth.js","reducers/index.js","store/index.js","components/Cell.jsx","components/Border.jsx","components/Board.jsx","components/NavBar.jsx","components/buttons/ResetButton.jsx","components/Score.jsx","components/buttons/SaveButton.jsx","components/Summary.jsx","components/Game.jsx","App.jsx","index.js"],"names":["CELL_SIZE","CELL_THRESHOLD","Math","round","WIDTH","Colors","EMPTY","RED","BLUE","apiEndpoints","login","signup","history","convertCoordsToPolygon","iterable","polygonPointsStr","forEach","element","concat","trim","inside","require","getAvailableNeighbors","board","cell","neighbors","x","y","push","HEIGTH","filter","el","color","isCaptured","dots","createGrid","m","key","i","j","id","isClickable","isVertex","detectCycle","startNode","starterNeighbors","possibleCycles","capturedPoints","result","success","borders","blue","red","neighbor","visited","recStack","cyclePath","detectCycleUtil","vertex","fromNode","arguments","length","undefined","currentNode","pop","sort","a","b","cycle","polygon","map","capturedByCycle","row","point","some","checkClickableCells","requests","authorization","username","password","method","headers","Content-Type","body","JSON","stringify","apiPost","token","store","getState","value","crossDomain","Authorization","apiGet","saveGameReset","type","saveGameBegin","saveGameSuccess","saveGameError","error","data","handleErrors","response","ok","console","log","text","Error","statusText","START_GAME","UPDATE_CELL","CAPTURE_CELLS","END_GAME","startGame","makeMove","dispatch","_getState$game","game","score","calculateCycle","Object","toConsumableArray","captureCells","updatedScore","winner","endGame","initialPlayer","initialGameState","player","isFinished","startedAt","endedAt","initialState","games","loading","saving","saved","state","_ref","objectSpread","message","REMOVE_TOKEN","initialTokenState","initialAuthState","appReducer","combineReducers","authStatus","_ref2","Date","now","rootReducer","action","persistConfig","storage","whitelist","pReducer","persistReducer","createStore","compose","applyMiddleware","thunk","window","devToolsExtension","f","persistor","persistStore","Cell","handleClick","_this$props","_this","props","moveOnClick","this","styleClasses","react_default","createElement","className","role","getComponentClasses","onClick","onKeyDown","Component","connect","Border","getClassName","coords","points","preview","previewBoard","previewBorders","styles","minWidth","maxWidth","_borders","Fragment","style","index","components_Border","components_Cell","logout","Link","to","title","startNewGame","currentPlayer","buttons_ResetButton","saveGame","fetch","then","catch","winnerFormat","buttons_SaveButton","label","Game","components_Summary","components_Score","components_Board","React","App","es","integration_react","BrowserRouter","Switch","Route","component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.572918c7.chunk.js","sourcesContent":["export const WIDTH = 20;\r\nexport const HEIGTH = 20;\r\nexport const CELL_SIZE = 24;\r\nexport const TEST = Math.round((WIDTH * HEIGTH) / 20);\r\nexport const CELL_THRESHOLD = 10;\r\n\r\nexport const Colors = {\r\n  EMPTY: 0,\r\n  RED: 1,\r\n  BLUE: 2,\r\n};\r\n\r\nexport const apiEndpoints = {\r\n  login: '/api/login',\r\n  signup: '/api/signup',\r\n  history: '/api/history',\r\n};\r\n","import { CELL_SIZE } from './contstants';\r\n\r\nexport function secondsToHms(d) {\r\n  d = Number(d);\r\n  const h = Math.floor(d / 3600);\r\n  const m = Math.floor((d % 3600) / 60);\r\n  const s = Math.floor((d % 3600) % 60);\r\n\r\n  const hDisplay = h > 0 ? h + (h === 1 ? ' hour, ' : ' hours, ') : '';\r\n  const mDisplay = m > 0 ? m + (m === 1 ? ' minute, ' : ' minutes, ') : '';\r\n  const sDisplay = s > 0 ? s + (s === 1 ? ' second' : ' seconds') : '';\r\n  return hDisplay + mDisplay + sDisplay;\r\n}\r\n\r\nexport function convertCoordsToPolygon(iterable) {\r\n  // converts cells x, y to relative x, y based on cell size\r\n  let polygonPointsStr = '';\r\n  iterable.forEach(element => {\r\n    polygonPointsStr += `${element[1] * CELL_SIZE + CELL_SIZE / 2},`;\r\n    polygonPointsStr += `${element[0] * CELL_SIZE + CELL_SIZE / 2} `;\r\n  });\r\n  return polygonPointsStr.trim();\r\n}\r\n","import { Colors, HEIGTH, WIDTH } from './contstants';\r\nimport { convertCoordsToPolygon } from './utils';\r\n\r\nconst inside = require('robust-point-in-polygon');\r\n\r\nconst checkClickableCells = board => board.some(row => row.some(el => el.isClickable === true));\r\n\r\nconst createGrid = () => {\r\n  const m = [];\r\n  let key = 0;\r\n\r\n  for (let i = 0; i < HEIGTH; i++) {\r\n    m[i] = [];\r\n    for (let j = 0; j < WIDTH; j++) {\r\n      m[i][j] = {\r\n        x: i,\r\n        y: j,\r\n        color: Colors.EMPTY,\r\n        id: key,\r\n        isClickable: true,\r\n        isCaptured: false,\r\n        isVertex: false,\r\n      };\r\n      key += 1;\r\n    }\r\n  }\r\n  return m;\r\n};\r\n\r\nconst getAvailableNeighbors = (board, cell) => {\r\n  // returns all neighbors with the same color as provided\r\n  // todo: add filter for cells if they are already in cycles and only neighbors of this cell\r\n  // put cells if they are already in cycles after\r\n  const neighbors = [];\r\n  const { x, y } = cell;\r\n  // North\r\n  if (x > 0) neighbors.push(board[x - 1][y]);\r\n  // North-East\r\n  if (x > 0 && y < WIDTH - 1) neighbors.push(board[x - 1][y + 1]);\r\n  // East\r\n  if (y < WIDTH - 1) neighbors.push(board[x][y + 1]);\r\n  // South East\r\n  if (x < HEIGTH - 1 && y < WIDTH - 1) neighbors.push(board[x + 1][y + 1]);\r\n  // South\r\n  if (x < HEIGTH - 1) neighbors.push(board[x + 1][y]);\r\n  // South West\r\n  if (x < HEIGTH - 1 && y > 0) neighbors.push(board[x + 1][y - 1]);\r\n  // West\r\n  if (y > 0) neighbors.push(board[x][y - 1]);\r\n  // North West\r\n  if (x > 0 && y > 0) neighbors.push(board[x - 1][y - 1]);\r\n  const result = neighbors.filter(el => el.color === cell.color && !el.isCaptured);\r\n  return result;\r\n};\r\n\r\nconst detectCycleUtil = (\r\n  board,\r\n  vertex,\r\n  visited,\r\n  recStack,\r\n  fromNode = null,\r\n  startNode = null,\r\n  cyclePath,\r\n) => {\r\n  if (!visited[vertex.id]) {\r\n    visited[vertex.id] = true;\r\n    recStack[vertex.id] = true;\r\n    cyclePath.push(vertex);\r\n    let neighbors = getAvailableNeighbors(board, vertex);\r\n    // Remove parent node from neighbors list\r\n    if (fromNode) {\r\n      neighbors = neighbors.filter(el => el.id !== fromNode.id);\r\n    }\r\n\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      const currentNode = neighbors[i];\r\n      // If not visited - traverse further\r\n      if (\r\n        !visited[currentNode.id] &&\r\n        detectCycleUtil(board, currentNode, visited, recStack, vertex, startNode, cyclePath)\r\n      ) {\r\n        return true;\r\n        // If vertex is not visited && already in recursive stack && it's starter node\r\n      }\r\n      // if node in recStack and it is a starter node - cycle detected\r\n      // prevent cycle detection if cycle path length is only 3 points\r\n      if (recStack[currentNode.id] && currentNode.id === startNode.id && cyclePath.length > 3) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  recStack[vertex.id] = false;\r\n  cyclePath.pop(vertex);\r\n  return false;\r\n};\r\n\r\nconst detectCycle = (board, startNode) => {\r\n  // get board and starter cell\r\n  // get all cell's neighbors\r\n  const starterNeighbors = getAvailableNeighbors(board, startNode);\r\n  const possibleCycles = [];\r\n  const borders = { blue: [], red: [] };\r\n  const capturedPoints = [];\r\n  const result = {\r\n    board,\r\n    success: false,\r\n    borders,\r\n    capturedPoints,\r\n    red: 0,\r\n    blue: 0,\r\n  };\r\n\r\n  // for each neighbors we try to find cycles\r\n  starterNeighbors.forEach(neighbor => {\r\n    const visited = {};\r\n    const recStack = {};\r\n    const cyclePath = [];\r\n\r\n    // startNode is already visited and must be in recursive stack\r\n    visited[startNode.id] = true;\r\n    recStack[startNode.id] = true;\r\n    cyclePath.push(startNode);\r\n\r\n    if (detectCycleUtil(board, neighbor, visited, recStack, startNode, startNode, cyclePath)) {\r\n      // Gather possible cycles\r\n      possibleCycles.push(cyclePath);\r\n    }\r\n  });\r\n\r\n  // Sort possible cycles by length (smaller first)\r\n  if (possibleCycles.length) {\r\n    possibleCycles.sort((a, b) => a.length - b.length);\r\n    // For each cycle build polygon and check if polygon contains points of different color\r\n    possibleCycles.forEach(cycle => {\r\n      const polygon = cycle.map(el => [el.x, el.y]);\r\n      const capturedByCycle = [];\r\n      // Check if polygon contains cells\r\n      board.forEach(row => {\r\n        row.forEach(point => {\r\n          if (inside(polygon, [point.x, point.y]) === -1) {\r\n            capturedByCycle.push(point);\r\n          }\r\n        });\r\n      });\r\n      // Check if polygon contains cells\r\n      if (capturedByCycle.length) {\r\n        if (\r\n          // Check if polygon contains enemy cells\r\n          capturedByCycle.some(el => el.color !== startNode.color && !el.isCaptured)\r\n        ) {\r\n          cycle.forEach(el => {\r\n            board[el.x][el.y].isVertex = true;\r\n          });\r\n          capturedByCycle.forEach(el => {\r\n            capturedPoints.push(el);\r\n            if (el.color !== Colors.EMPTY && el.color !== startNode.color && !el.isCaptured)\r\n              if (startNode.color === Colors.RED) {\r\n                result.red += 1;\r\n              } else {\r\n                result.blue += 1;\r\n              }\r\n            board[el.x][el.y].isClickable = false;\r\n            board[el.x][el.y].isCaptured = true;\r\n          });\r\n          if (startNode.color === Colors.RED) {\r\n            result.borders.red.push(convertCoordsToPolygon(polygon));\r\n          } else {\r\n            result.borders.blue.push(convertCoordsToPolygon(polygon));\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n  if (capturedPoints.length) result.success = true;\r\n  return result;\r\n};\r\n\r\nexport default {\r\n  createGrid,\r\n  detectCycle,\r\n  checkClickableCells,\r\n};\r\n","import { store } from '../../store';\r\n\r\nfunction apiGet() {\r\n  const { token } = store.getState();\r\n  if (token.value !== null) {\r\n    return {\r\n      method: 'GET',\r\n      headers: { Authorization: `Token ${token.value}` },\r\n    };\r\n  }\r\n  return {};\r\n}\r\n\r\nfunction apiPost(body) {\r\n  const { token } = store.getState();\r\n  if (token.value !== null) {\r\n    return {\r\n      crossDomain: true,\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Token ${token.value}`,\r\n      },\r\n      body,\r\n    };\r\n  }\r\n  return {};\r\n}\r\n\r\nfunction authorization(username, password) {\r\n  return {\r\n    method: 'post',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ username, password }),\r\n  };\r\n}\r\n\r\nexport default {\r\n  authorization,\r\n  apiPost,\r\n  apiGet,\r\n};\r\n","import headers from './helpers/requests';\r\nimport { store } from '../store';\r\nimport { apiEndpoints } from './helpers/contstants';\r\n\r\nexport const RETRIEVE_HISTORY_BEGIN = 'RETRIEVE_HISTORY_BEGIN';\r\nexport const RETRIEVE_HISTORY_SUCCESS = 'RETRIEVE_HISTORY_SUCCESS';\r\nexport const RETRIEVE_HISTORY_ERROR = 'RETRIEVE_HISTORY_ERROR';\r\n\r\nexport const SAVE_GAME_BEGIN = 'SAVE_GAME_BEGIN';\r\nexport const SAVE_GAME_SUCCESS = 'SAVE_GAME_SUCCESS';\r\nexport const SAVE_GAME_ERROR = 'SAVE_GAME_ERROR';\r\nexport const SAVE_GAME_RESET = 'SAVE_GAME_RESET';\r\n\r\nexport const retrieveHistoryBegin = () => ({ type: RETRIEVE_HISTORY_BEGIN });\r\nexport const retrieveHistorySuccess = data => ({ type: RETRIEVE_HISTORY_SUCCESS, data });\r\nexport const retrieveHistoryError = error => ({ type: RETRIEVE_HISTORY_ERROR, data: error });\r\n\r\nexport const saveGameReset = () => ({ type: SAVE_GAME_RESET });\r\nexport const saveGameBegin = () => ({ type: SAVE_GAME_BEGIN });\r\nexport const saveGameSuccess = () => ({ type: SAVE_GAME_SUCCESS });\r\nexport const saveGameError = error => ({\r\n  type: SAVE_GAME_ERROR,\r\n  data: error,\r\n});\r\n\r\nfunction handleErrors(response) {\r\n  if (!response.ok) {\r\n    console.log(response.text());\r\n    throw Error(response.statusText);\r\n  }\r\n  return response.text();\r\n}\r\n\r\nexport function retrieveHistory() {\r\n  return dispatch => {\r\n    dispatch(retrieveHistoryBegin());\r\n    return fetch(apiEndpoints.history, headers.apiGet())\r\n      .then(handleErrors)\r\n      .then(response => {\r\n        const data = JSON.parse(response);\r\n        dispatch(retrieveHistorySuccess(data));\r\n        return data.token;\r\n      })\r\n      .catch(error => {\r\n        dispatch(retrieveHistoryError(error));\r\n      });\r\n  };\r\n}\r\n\r\nexport function saveGamePost(endpoint) {\r\n  return dispatch => {\r\n    dispatch(saveGameBegin());\r\n    // Save current game\r\n    const { game } = store.getState();\r\n    const body = {\r\n      board: game.board,\r\n      borders: game.borders,\r\n      winner: game.winner,\r\n      score: game.score,\r\n      startedAt: game.startedAt,\r\n      endedAt: game.endedAt,\r\n    };\r\n    return fetch(apiEndpoints.history, headers.apiPost(JSON.stringify(body)))\r\n      .then(handleErrors)\r\n      .then(response => {\r\n        dispatch(saveGameSuccess());\r\n      })\r\n      .catch(error => {\r\n        dispatch(saveGameError(error));\r\n      });\r\n  };\r\n}\r\n","import dots from './helpers/dots';\r\nimport { CELL_THRESHOLD, Colors } from './helpers/contstants';\r\nimport { saveGameReset } from './history';\r\n\r\nexport const START_GAME = 'START_GAME';\r\nexport const UPDATE_CELL = 'UPDATE_CELL';\r\nexport const CAPTURE_CELLS = 'CAPTURE_CELLS';\r\nexport const END_GAME = 'END_GAME';\r\n\r\nexport function startGame() {\r\n  return {\r\n    type: START_GAME,\r\n  };\r\n}\r\n\r\nexport function updateCell(data) {\r\n  return {\r\n    type: UPDATE_CELL,\r\n    data,\r\n  };\r\n}\r\n\r\nexport function captureCells(data) {\r\n  return {\r\n    type: CAPTURE_CELLS,\r\n    data,\r\n  };\r\n}\r\n\r\nexport function endGame(data) {\r\n  return {\r\n    type: END_GAME,\r\n    data,\r\n  };\r\n}\r\n\r\nexport function makeMove(cell) {\r\n  return (dispatch, getState) => {\r\n    // Update cell on board\r\n    dispatch(updateCell(cell));\r\n    const { board, borders, score } = getState().game;\r\n    // Detect cycles\r\n    const calculateCycle = dots.detectCycle(board, cell);\r\n    // If there is a cycle - update current board and score\r\n    if (calculateCycle.success) {\r\n      calculateCycle.score = {\r\n        red: score.red + calculateCycle.red,\r\n        blue: score.blue + calculateCycle.blue,\r\n      };\r\n      calculateCycle.borders = {\r\n        blue: [...borders.blue, ...calculateCycle.borders.blue],\r\n        red: [...borders.red, ...calculateCycle.borders.red],\r\n      };\r\n      dispatch(captureCells(calculateCycle));\r\n    }\r\n    // Check for win conditions\r\n    const updatedScore = getState().game.score;\r\n    let winner = null;\r\n\r\n    // if one of the player capture more than half points on board\r\n    if (updatedScore.red > CELL_THRESHOLD || updatedScore.blue > CELL_THRESHOLD) {\r\n      winner = updatedScore.red > CELL_THRESHOLD ? Colors.RED : Colors.BLUE;\r\n    }\r\n    if (!dots.checkClickableCells(getState().game.board)) {\r\n      if (updatedScore.red === updatedScore.blue) {\r\n        winner = Colors.EMPTY;\r\n      } else {\r\n        winner = updatedScore.red > updatedScore.blue ? Colors.RED : Colors.BLUE;\r\n      }\r\n    }\r\n    if (winner) {\r\n      dispatch(saveGameReset());\r\n      dispatch(endGame(winner));\r\n    }\r\n  };\r\n}\r\n","import { UPDATE_CELL, START_GAME, CAPTURE_CELLS, END_GAME } from '../actions/game';\r\nimport { Colors } from '../actions/helpers/contstants';\r\nimport dots from '../actions/helpers/dots';\r\n\r\nconst initialPlayer = Colors.BLUE;\r\nconst initialGameState = {\r\n  board: [],\r\n  borders: { blue: [], red: [] },\r\n  player: initialPlayer,\r\n  isFinished: false,\r\n  score: { red: 0, blue: 0 },\r\n  startedAt: null,\r\n  endedAt: null,\r\n  winner: 0,\r\n};\r\n\r\nexport default (state = initialGameState, { type, data }) => {\r\n  switch (type) {\r\n    case START_GAME:\r\n      return {\r\n        ...state,\r\n        board: dots.createGrid(),\r\n        borders: { blue: [], red: [] },\r\n        player: initialPlayer,\r\n        isFinished: false,\r\n        score: { red: 0, blue: 0 },\r\n        startedAt: Math.round(Date.now() / 1000),\r\n        winner: 0,\r\n        endedAt: null,\r\n      };\r\n    case END_GAME:\r\n      return {\r\n        ...state,\r\n        isFinished: true,\r\n        endedAt: Math.round(Date.now() / 1000),\r\n        board: state.board.map(row =>\r\n          row.map(cell => (cell.isClickable ? { ...cell, isClickable: false } : cell)),\r\n        ),\r\n        winner: data,\r\n      };\r\n    case CAPTURE_CELLS: {\r\n      return {\r\n        ...state,\r\n        score: data.score,\r\n        borders: data.borders,\r\n        board: data.board,\r\n      };\r\n    }\r\n    case UPDATE_CELL: {\r\n      data.color = state.player;\r\n      data.isClickable = false;\r\n      return {\r\n        ...state,\r\n        player: state.player === Colors.RED ? Colors.BLUE : Colors.RED,\r\n        board: state.board.map(row =>\r\n          row.map(\r\n            cell =>\r\n              cell.id === data.id ? { ...cell, isClickable: false, color: state.player } : cell,\r\n          ),\r\n        ),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  SAVE_GAME_BEGIN,\r\n  SAVE_GAME_ERROR,\r\n  SAVE_GAME_SUCCESS,\r\n  SAVE_GAME_RESET,\r\n  RETRIEVE_HISTORY_BEGIN,\r\n  RETRIEVE_HISTORY_SUCCESS,\r\n  RETRIEVE_HISTORY_ERROR,\r\n} from '../actions/history';\r\n\r\nconst initialState = {\r\n  games: [],\r\n  loading: false,\r\n  saving: false,\r\n  saved: false,\r\n  error: null,\r\n};\r\n\r\nconst history = (state = initialState, { type, data }) => {\r\n  switch (type) {\r\n    case SAVE_GAME_BEGIN:\r\n      return { ...state, saving: true, saved: false, error: null };\r\n    case SAVE_GAME_SUCCESS:\r\n      return { ...state, saving: false, saved: true, error: null };\r\n    case SAVE_GAME_ERROR:\r\n      return { ...state, saving: false, saved: false, error: data.message };\r\n    case SAVE_GAME_RESET:\r\n      return { ...state, saving: false, saved: false, error: null };\r\n    case RETRIEVE_HISTORY_BEGIN:\r\n      return { ...state, loading: true, error: null };\r\n    case RETRIEVE_HISTORY_ERROR:\r\n      return { ...state, loading: false, error: data.message };\r\n    case RETRIEVE_HISTORY_SUCCESS:\r\n      return { ...state, loading: false, error: null, games: data };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default history;\r\n","import { store } from '../store';\r\nimport headers from './helpers/requests';\r\n\r\nexport const REMOVE_TOKEN = 'REMOVE_TOKEN';\r\nexport const FETCH_TOKEN_BEGIN = 'FETCH_TOKEN_BEGIN';\r\nexport const FETCH_TOKEN_SUCCESS = 'FETCH_TOKEN_SUCCESS';\r\nexport const FETCH_TOKEN_ERROR = 'FETCH_TOKEN_ERROR';\r\n\r\nexport function isLoggedIn() {\r\n  return store.getState().token.value !== null;\r\n}\r\n\r\nexport const fetchTokenBegin = () => ({\r\n  type: FETCH_TOKEN_BEGIN,\r\n});\r\n\r\nexport const fetchTokenSuccess = token => ({\r\n  type: FETCH_TOKEN_SUCCESS,\r\n  data: { token },\r\n});\r\n\r\nexport const fetchTokenError = error => ({\r\n  type: FETCH_TOKEN_ERROR,\r\n  data: error,\r\n});\r\n\r\nexport function removeToken() {\r\n  return {\r\n    type: REMOVE_TOKEN,\r\n  };\r\n}\r\n\r\nfunction handleErrors(response) {\r\n  if (!response.ok) {\r\n    const errorDetails = { message: response.statusText, status: response.status };\r\n    throw errorDetails;\r\n  }\r\n  return response.text();\r\n}\r\n\r\nexport function fetchToken(username, password, endpoint) {\r\n  return dispatch => {\r\n    dispatch(fetchTokenBegin());\r\n    return fetch(endpoint, headers.authorization(username, password))\r\n      .then(handleErrors)\r\n      .then(response => {\r\n        const data = JSON.parse(response);\r\n        dispatch(fetchTokenSuccess(data.token));\r\n        return data.token;\r\n      })\r\n      .catch(error => {\r\n        dispatch(fetchTokenError(error));\r\n      });\r\n  };\r\n}\r\n","import {\r\n  FETCH_TOKEN_BEGIN,\r\n  FETCH_TOKEN_ERROR,\r\n  FETCH_TOKEN_SUCCESS,\r\n  REMOVE_TOKEN,\r\n} from '../actions/auth';\r\n\r\nconst initialTokenState = {\r\n  value: null,\r\n};\r\n\r\nconst initialAuthState = {\r\n  value: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const token = (state = initialTokenState, { type, data }) => {\r\n  switch (type) {\r\n    case FETCH_TOKEN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        value: data.token,\r\n      };\r\n    case REMOVE_TOKEN:\r\n      return { ...state, value: null };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const authStatus = (state = initialAuthState, { type, data }) => {\r\n  switch (type) {\r\n    case FETCH_TOKEN_BEGIN:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n      };\r\n    case FETCH_TOKEN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      };\r\n    case FETCH_TOKEN_ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: data,\r\n      };\r\n\r\n    case REMOVE_TOKEN:\r\n      return { ...state, value: null, error: null };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport game from './game';\r\nimport history from './history';\r\nimport { authStatus, token } from './auth';\r\n\r\nconst appReducer = combineReducers({\r\n  authStatus,\r\n  token,\r\n  game,\r\n  history,\r\n});\r\n\r\nconst rootReducer = (state, action) => appReducer(state, action);\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport thunk from 'redux-thunk';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport rootReducer from '../reducers';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst pReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nfunction configureStore(initialState) {\r\n  return createStore(\r\n    pReducer,\r\n    initialState,\r\n    compose(\r\n      applyMiddleware(thunk),\r\n      window.devToolsExtension ? window.devToolsExtension() : f => f,\r\n    ),\r\n  );\r\n}\r\n\r\nexport const store = configureStore();\r\nexport const persistor = persistStore(store);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Colors } from '../actions/helpers/contstants';\r\nimport { makeMove } from '../actions/game';\r\n\r\nclass Cell extends Component {\r\n  getComponentClasses() {\r\n    const { cell } = this.props;\r\n    let styleClasses = '';\r\n    if (cell.color === Colors.EMPTY) {\r\n      styleClasses += 'cell-empty';\r\n    } else {\r\n      styleClasses += cell.color === Colors.RED ? 'cell-red' : 'cell-blue';\r\n    }\r\n    if (cell.isClickable) styleClasses += ' cell-active';\r\n    return styleClasses;\r\n  }\r\n\r\n  handleClick = () => {\r\n    const { cell, isFinished, moveOnClick } = this.props;\r\n    if (!cell.isClickable || isFinished) return;\r\n    moveOnClick(cell);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"cell-wrapper\">\r\n        <div\r\n          role=\"presentation\"\r\n          className={this.getComponentClasses()}\r\n          onClick={this.handleClick}\r\n          onKeyDown={this.handleClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isFinished: state.game.isFinished,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    moveOnClick: cell => dispatch(makeMove(cell)),\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Cell);\r\n","import React, { Component } from 'react';\r\nimport { Colors } from '../actions/helpers/contstants';\r\n\r\nclass Border extends Component {\r\n  getClassName = () => {\r\n    const { color } = this.props;\r\n    return color === Colors.RED ? 'border-red' : 'border-blue';\r\n  };\r\n\r\n  render() {\r\n    const { coords } = this.props;\r\n    return (\r\n      <svg className=\"borders\">\r\n        <polygon points={coords} className={this.getClassName()} />\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Border;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cell from './Cell';\r\nimport { CELL_SIZE, WIDTH, Colors } from '../actions/helpers/contstants';\r\nimport Border from './Border';\r\n\r\nconst Board = ({ preview, previewBoard, previewBorders, board, borders }) => {\r\n  const styles = {\r\n    minWidth: CELL_SIZE * WIDTH,\r\n    maxWidth: CELL_SIZE * WIDTH,\r\n  };\r\n\r\n  if (preview) {\r\n    board = previewBoard;\r\n    borders = previewBorders;\r\n  }\r\n  const { blue, red } = borders;\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"board\" style={styles}>\r\n        {blue.map((el, index) => (\r\n          <Border key={`Blue:${index}`} color={Colors.BLUE} coords={el} />\r\n        ))}\r\n        {red.map((el, index) => (\r\n          <Border key={`Red:${index}`} color={Colors.RED} coords={el} />\r\n        ))}\r\n\r\n        {board.map(row =>\r\n          row.map(cell => <Cell x={cell.x} y={cell.y} key={cell.id} cell={cell} />),\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    board: state.game.board,\r\n    borders: state.game.borders,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Board);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { isLoggedIn, removeToken } from '../actions/auth';\r\n\r\nconst NavBar = ({ logout }) => (\r\n  <React.Fragment>\r\n    {isLoggedIn() && (\r\n      <nav className=\"navbar navbar-dark bg-dark justify-content-between\">\r\n        <h6 className=\"navbar-brand\">Dots game</h6>\r\n        <Link to=\"/login\">\r\n          <button type=\"button\" title=\"Logout\" className=\"btn btn-primary\" onClick={logout}>\r\n            Logout\r\n          </button>\r\n        </Link>\r\n      </nav>\r\n    )}\r\n  </React.Fragment>\r\n);\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    token: state.token,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    logout: () => dispatch(removeToken()),\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(NavBar);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { startGame } from '../../actions/game';\r\n\r\nconst ResetButton = ({ startNewGame, title }) => (\r\n  <button type=\"button\" className=\"btn btn-secondary form-control\" onClick={startNewGame}>\r\n    {title}\r\n  </button>\r\n);\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    startNewGame: () => dispatch(startGame()),\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps,\r\n)(ResetButton);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { startGame } from '../actions/game';\r\nimport { CELL_THRESHOLD } from '../actions/helpers/contstants';\r\nimport ResetButton from './buttons/ResetButton';\r\n// import HistoryButton from './buttons/HistoryButton';\r\n\r\nconst Score = ({ score, player }) => {\r\n  const currentPlayer = player === 1 ? 'Red' : 'Blue';\r\n  return (\r\n    <div>\r\n      <p>Score threshold: {CELL_THRESHOLD}</p>\r\n      <p>Blue: {score.blue}</p>\r\n      <p>Red: {score.red}</p>\r\n      <p>Next move: {currentPlayer}</p>\r\n      <ResetButton title=\"Reset game\" />\r\n      {/* <HistoryButton /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    startNewGame: () => dispatch(startGame()),\r\n  };\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    score: state.game.score,\r\n    player: state.game.player,\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Score);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { saveGamePost } from '../../actions/history';\r\n\r\nconst SaveButton = ({ saveGame, title }) => (\r\n  <button type=\"button\" onClick={saveGame} className=\"btn btn-secondary form-control\">\r\n    {title}\r\n  </button>\r\n);\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    saveGame: () => dispatch(saveGamePost()),\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps,\r\n)(SaveButton);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport ResetButton from './buttons/ResetButton';\r\nimport SaveButton from './buttons/SaveButton';\r\nimport { saveGameReset } from '../actions/history';\r\n\r\nconst Summary = ({ winner, history }) => {\r\n  const winnerName = winner === 1 ? 'Red' : 'Blue';\r\n  const winnerFormat = winner !== 0 ? `${winnerName} player won!` : \"It's a tie!\";\r\n  const { saving, saved, error } = history;\r\n  return (\r\n    <React.Fragment>\r\n      {error && (\r\n        <div>\r\n          <h3>{error}</h3>\r\n          <SaveButton title=\"Retry save\" />\r\n          <ResetButton title=\"Start new game\" />\r\n        </div>\r\n      )}\r\n      {saved && (\r\n        <React.Fragment>\r\n          <h1>Game saved!</h1>\r\n          <Link to=\"/history\">\r\n            <button type=\"button\" className=\"btn btn-secondary form-control\" label=\"History\" />\r\n          </Link>\r\n          <ResetButton title=\"Start new game\" />\r\n        </React.Fragment>\r\n      )}\r\n      {saving &&\r\n        !error && (\r\n          <React.Fragment>\r\n            <div className=\"lds-ripple float-right \">\r\n              <div />\r\n            </div>\r\n            <div className=\"col-sm-8 float-left\">\r\n              <h1>Saving</h1>\r\n            </div>\r\n          </React.Fragment>\r\n        )}\r\n      {!saving &&\r\n        !saved &&\r\n        !error && (\r\n          <React.Fragment>\r\n            <h3>{winnerFormat}</h3>\r\n            {/* <SaveButton title=\"Save game\" /> */}\r\n            <ResetButton title=\"Start new game\" />\r\n          </React.Fragment>\r\n        )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    history: state.history,\r\n    winner: state.game.winner,\r\n    score: state.game.score,\r\n    player: state.game.player,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    startNewGame: () => dispatch(saveGameReset()),\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Summary);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { startGame } from '../actions/game';\r\nimport Board from './Board';\r\nimport NavBar from './NavBar';\r\nimport Score from './Score';\r\nimport Summary from './Summary';\r\n\r\nclass Game extends React.Component {\r\n  componentDidMount() {\r\n    const { startNewGame } = this.props;\r\n    startNewGame();\r\n  }\r\n\r\n  render() {\r\n    const { isFinished } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container m-4 mw-100 d-flex justify-content-center\">\r\n          <div className=\"left-control m-2\">{!isFinished ? <Score /> : <Summary />}</div>\r\n          <div>\r\n            <Board />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    startNewGame: () => dispatch(startGame()),\r\n  };\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isFinished: state.game.isFinished,\r\n    game: state.game,\r\n    board: state.game.board,\r\n    player: state.game.player,\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Game);\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/es/integration/react';\r\nimport { persistor, store } from './store';\r\nimport Game from './components/Game';\r\nimport NotFound from './components/NoMatch';\r\n// import PrivateRoute from './routes';\r\n// import Login from './components/Login';\r\n// import Signup from './components/Signup';\r\n// import History from './components/History';\r\n\r\nconst App = () => (\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <Router>\r\n        <Switch>\r\n          <Route component={Game} />\r\n        </Switch>\r\n      </Router>\r\n    </PersistGate>\r\n  </Provider>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}